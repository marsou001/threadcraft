"use client";
import { useState, useEffect, ChangeEvent, useRef, FormEvent } from "react";
import Link from "next/link";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Loader2,
  Upload,
  Copy,
  Clock,
  Zap,
} from "lucide-react";
import Image from "next/image";
import { ContentType, History, HistoryItem, SocialMedia } from "@/types";
import { getUserPoints, updateUserPoints } from "@/services/users";
import { cn } from "@/lib/utils";
import TwitterMock from "@/components/social-mocks/TwitterMock";
import InstagramMock from "@/components/social-mocks/InstagramMock";
import LinkedInMock from "@/components/social-mocks/LinkedInMock";
import { useAuth } from "@clerk/nextjs";
import { useRouter } from "next/navigation";
import { generateContent } from "@/services/content";

const mockHistory: History = [
  {
    id: 1,
    socialMedia: "X",
    prompt: "mock prompt",
    content: "This is the content generated by the prompt",
    createdAt: new Date("2024-09-13"),
  }
];

const contentTypes: ContentType[] = [
  { socialMedia: "X", label: "Twitter Thread" },
  { socialMedia: "Instagram", label: "Instagram Caption" },
  { socialMedia: "LinkedIn", label: "LinkedIn Post" },
];

const MAX_TWEET_LENGTH = 280;
const POINTS_PER_GENERATION = 5;

export default function GenerateContent() {
  const [history, setHistory] = useState<History>([]);
  const [selectedHistoryItem, setSelectedHistoryItem] = useState<HistoryItem | null>(null);
  const [userPoints, setUserPoints] = useState<number | null>(null);
  const [socialMedia, setSocialMedia] = useState<SocialMedia>("X");
  const [prompt, setPrompt] = useState("");
  const [image, setImage] = useState<File | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<string[]>([]);

  const hiddenFileInputRef = useRef<HTMLInputElement>(null);
  const { isLoaded, isSignedIn, userId } = useAuth();
  const router = useRouter();

  const isSubmitButtonDisabled = isGenerating || prompt === "" || userPoints === null || userPoints < POINTS_PER_GENERATION;

  async function fetchUserHistory() {
    try {
      // TODO: fetch user history from database
      // const contentHistory = await getGeneratedContentHistory(user.id);
      setHistory(mockHistory);
    } catch (error) {
      if (error instanceof Error) {
        console.log("error: ", error.message);
      }
    }
  };

  function handleHistoryItemClick(item: HistoryItem) {
    setSelectedHistoryItem(item);
    setSocialMedia(item.socialMedia);
    setPrompt(item.prompt);
    setGeneratedContent(
      item.socialMedia === "X"
        ? item.content.split("\n\n")
        : [item.content]
    );
  };

  async function fetchUserPoints() {
    try {
      const points = await getUserPoints(userId!);
      setUserPoints(points);
    } catch(error) {
      if (error instanceof Error) {
        console.log("error: ", error.message);
      }
    }
  }

  function handleImageUpload(e: ChangeEvent<HTMLInputElement>) {
    if (e.target.files) setImage(e.target.files[0]);
  }

  async function handleGenerateContent(e: FormEvent) {
    if (userPoints === null || userPoints === undefined || userPoints < 5) {
      console.log("Not enough points");
      // Maybe redirect to pricing page?
      return;
    }

    e.preventDefault();
    setIsGenerating(true);

    // Generate content
    try {
      // Generating content logic
      const content = await generateContent(userId!, socialMedia, prompt);
      if (socialMedia === "LinkedIn") {
        setGeneratedContent([content]);
      }

      if (socialMedia === "X") {
        const threads = content.split(/\n\n/);
        debugger
        setGeneratedContent(threads);
      }

    } catch (error) {
      if (error instanceof Error) {
        console.log("error: ", error.message);
      }
    }
    
    // Update user points
    // const newUserPoints = userPoints - POINTS_PER_GENERATION;
    // try {
    //   await updateUserPoints(userId!, newUserPoints);
    //   setUserPoints(newUserPoints)
    // } catch (error) {
    //   if (error instanceof Error) {
    //     console.log("error: ", error.message);
    //   }
    // }
    
    setIsGenerating(false);
  }


  function renderContentMock() {
    if (generatedContent.length === 0) return null;

    switch(socialMedia) {
      case "X":
        return <TwitterMock content={generatedContent} />;
      case "Instagram":
        return <InstagramMock content={generatedContent[0]} />;
      case "LinkedIn":
        return <LinkedInMock content={generatedContent[0]} />;
      default:
        return null;
    }
  };
  
  useEffect(() => {
    if (!isLoaded) return;

    if (isLoaded && !isSignedIn) {
      router.push("/sign-in");
      return;
    }

    fetchUserHistory();
    fetchUserPoints();
  }, [isLoaded, isSignedIn]);

  return (
    <div className="bg-gradient-to-br from-gray-900 to-black min-h-screen text-white">
      <div className="container mx-auto px-4 mb-8 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 mt-14 lg:grid-cols-3 gap-8">
          {/* Left sidebar - History */}
          <div className="lg:col-span-1 bg-gray-800 rounded-2xl p-6 h-[calc(100vh-12rem)] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-semibold text-blue-400">History</h2>
              <Clock className="h-6 w-6 text-blue-400" />
            </div>
            <div className="space-y-4">
              {history.map((item) => (
                <div
                  key={item.id}
                  className="p-4 bg-gray-700 rounded-xl hover:bg-gray-600 transition-colors cursor-pointer"
                  onClick={() => handleHistoryItemClick(item)}
                >
                  <div className="flex items-center mb-2">
                    <Image src={`/icons/${item.socialMedia}.png`} alt={item.socialMedia} width={24} height={24} className="mr-2 h-5 w-5" />
                    <span className="text-sm font-medium">
                      {item.socialMedia}
                    </span>
                  </div>
                  <p className="text-sm text-gray-300 truncate">
                    {item.prompt}
                  </p>
                  <div className="flex items-center text-xs text-gray-400 mt-2">
                    <Clock className="mr-1 h-3 w-3" />
                    {new Date(item.createdAt).toLocaleString()}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Main content area */}
          <div className="lg:col-span-2 space-y-6">
            {/* Points display */}
            <div className="bg-gray-800 p-6 rounded-2xl flex items-center justify-between">
              <div className="flex items-center">
                <Zap className="h-8 w-8 text-yellow-400 mr-3" />
                <div>
                  <p className="text-sm text-gray-400">Available Points</p>
                  <p className="text-2xl font-bold text-yellow-400">
                    { userPoints !== null ? userPoints : "Loading..." }
                  </p>
                </div>
              </div>
              <button className="bg-blue-600 hover:bg-blue-700 text-white text-sm py-2 px-4 rounded-full transition-colors">
                <Link href="/pricing">Get More Points</Link>
              </button>
            </div>

            {/* Content generation form */}
            <form onSubmit={handleGenerateContent} className="bg-gray-800 p-6 rounded-2xl space-y-6">
              <div>
                <label className="text-gray-300 text-sm font-medium block mb-2">
                  Content Type
                </label>
                <Select
                  onValueChange={(e) => setSocialMedia(e as SocialMedia)}
                >
                  <SelectTrigger className="bg-gray-700 w-full border-none rounded-xl cursor-pointer">
                    <SelectValue placeholder="Select content type" />
                  </SelectTrigger>
                  <SelectContent className="text-white bg-gray-800">
                    {contentTypes.map((type) => (
                      <SelectItem key={type.socialMedia} value={type.socialMedia} className="cursor-pointer">
                        <div className="flex items-center">
                          <Image src={`/icons/${type.socialMedia}.png`} alt={type.socialMedia} width={24} height={24} className="mr-2 h-4 w-4" />
                          {type.label}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label
                  htmlFor="prompt"
                  className="text-gray-300 text-sm font-medium block mb-2"
                >
                  Prompt
                </label>
                <textarea
                  id="prompt"
                  placeholder="Enter your prompt here..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  rows={4}
                  className="bg-gray-700 w-full p-3 border-none rounded-xl resize-none"
                />
              </div>

              {socialMedia === "Instagram" && (
                <div>
                  <label id="image-upload" className="block text-sm font-medium mb-2 text-gray-300">
                    Upload Image
                  </label>
                  <div className="flex items-center space-x-3">
                    <input
                      ref={hiddenFileInputRef}
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="sr-only"
                    />
                    <button
                      type="button"
                      aria-hidden
                      className="text-sm font-medium bg-gray-700 hover:bg-gray-600 flex justify-center items-center px-4 py-2 rounded-xl cursor-pointer transition-colors"
                      onClick={() => hiddenFileInputRef.current?.click()}
                    >
                      <Upload className="mr-2 h-5 w-5" />
                      <span>Upload Image</span>
                    </button>
                    {image && (
                      <span className="text-sm text-gray-400">
                        {image.name}
                      </span>
                    )}
                  </div>
                </div>
              )}

              <button
                type="submit"
                disabled={isSubmitButtonDisabled}
                className={cn("text-white flex justify-center items-center w-full py-3 rounded-xl transition-colors", {
                  "text-gray-300 bg-gray-500 cursor-not-allowed": isSubmitButtonDisabled,
                  "bg-blue-600 hover:bg-blue-700 cursor-pointer": !isSubmitButtonDisabled,
                })}
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    Generating...
                  </>
                ) : (
                  `Generate Content (${POINTS_PER_GENERATION} points)`
                )}
              </button>
            </form>

            {/* Generated content display */}
            {/* {(selectedHistoryItem || generatedContent.length > 0) && (
              <div className="bg-gray-800 p-6 rounded-2xl space-y-4">
                <h2 className="text-blue-400 text-2xl font-semibold">
                  {selectedHistoryItem ? "History Item" : "Generated Content"}
                </h2>
                {contentType === "twitter" ? (
                  <div className="space-y-4">
                    {(selectedHistoryItem
                      ? selectedHistoryItem.content.split("\n\n")
                      : generatedContent
                    ).map((tweet, index) => (
                      <div
                        key={index}
                        className="bg-gray-700 p-4 rounded-xl relative"
                      >
                        <ReactMarkdown className="prose prose-invert max-w-none mb-2 text-sm">
                          {tweet}
                        </ReactMarkdown>
                        <div className="flex justify-between items-center text-gray-400 text-xs mt-2">
                          <span>
                            {tweet.length}/{MAX_TWEET_LENGTH}
                          </span>
                          <Button
                            onClick={() => copyToClipboard(tweet)}
                            className="bg-gray-600 hover:bg-gray-500 text-white rounded-full p-2 transition-colors"
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="bg-gray-700 p-4 rounded-xl">
                    <ReactMarkdown className="prose prose-invert max-w-none text-sm">
                      {selectedHistoryItem
                        ? selectedHistoryItem.content
                        : generatedContent[0]}
                    </ReactMarkdown>
                  </div>
                )}
              </div>
            )} */}

            {/* Content preview */}
            {generatedContent.length > 0 && (
              <div className="bg-gray-800 p-6 rounded-2xl">
                <h2 className="text-2xl font-semibold mb-4 text-blue-400">
                  Preview
                </h2>
                {renderContentMock()}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}